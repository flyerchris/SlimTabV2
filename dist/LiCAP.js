var LiCAP=function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){"use strict";var r;n.d(e,"b",function(){return r}),n.d(e,"a",function(){return u}),function(t){t.setAttributes=function(t,e){for(let n in e)t.setAttribute(n,e[n])},t.setStyle=function(t,e){for(let n in e)t.style.setProperty(n,e[n])}}(r||(r={}));class o{constructor(){this.funcs=[]}call(...t){this.funcs.forEach(e=>{e(...t)})}push(t){this.funcs.push(t)}}class u{constructor(t){t.forEach(t=>{this[t]=new o})}}},function(t,e,n){"use strict";n.r(e);var r=n(0),o=function(t,e,n,r){return new(n||(n=Promise))(function(o,u){function i(t){try{c(r.next(t))}catch(t){u(t)}}function s(t){try{c(r.throw(t))}catch(t){u(t)}}function c(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(i,s)}c((r=r.apply(t,e||[])).next())})};class u{constructor(t){this.device=t,this.callbacks=new r.a(["data"]),this.device.onmidimessage(this.onMessage.bind(this))}on(t,e){t in this.callbacks&&this.callbacks[t].push(e)}static isSupported(){return navigator.requestMIDIAccess}static enumerate(){return o(this,void 0,void 0,function*(){let t=[];if(u.isSupported()){let e=yield navigator.requestMIDIAccess();for(let n of e.inputs.values())n.name.match(/LiCAP Device/)&&t.push(new u(n))}return t})}onMessage(t){this.callbacks.data.call(t.data)}}u.isSupported()?console.log("Your browser supports LiCAP"):console.log("Your browser does not support LiCAP")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
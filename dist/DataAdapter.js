var DataAdapter=function(t){var e={};function a(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,a),n.l=!0,n.exports}return a.m=t,a.c=e,a.d=function(t,e,r){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(a.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)a.d(r,n,function(e){return t[e]}.bind(null,n));return r},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=3)}({3:function(t,e,a){"use strict";a.r(e),a.d(e,"DataAdapter",function(){return r});class r{constructor(t){this.rawData=[],this.spb=500,this.lengthPerBeat=4,t&&(this.spb=6e4/t)}receiveData(t,e,a,r){this.rawData.push([t,e,r]),this.receiveInterval||(this.receiveInterval=setTimeout(this.packNote.bind(this),10))}setSendDataCallBack(t){this.sendData=t}packNote(){let t=[-1,-1,-1,-1,-1,-1];for(let e=0;e<this.rawData.length;e++)t[this.rawData[e][0]]=3;if(this.noteRawData){let t=this.rawData[0][2]-this.preTime;if(t>this.spb*this.lengthPerBeat)this.noteRawData[0]=1;else{let e=Math.log(this.spb/t)/Math.log(2),a=(Math.log(this.spb/(3*t)),Math.log(2),Math.pow(2,Math.ceil(e-.5)));this.noteRawData[0]=this.lengthPerBeat*a}this.sendData(-1,this.noteRawData)}this.preTime=this.rawData[0][2],this.noteRawData=[8,t,null],this.rawData=[],this.receiveInterval=null}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
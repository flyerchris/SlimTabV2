var SlimTabV2=function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=2)}([function(t,e,i){"use strict";var n;i.d(e,"b",function(){return n}),i.d(e,"a",function(){return r}),function(t){t.setAttributes=function(t,e){for(let i in e)t.setAttribute(i,e[i])},t.setStyle=function(t,e){for(let i in e)t.style.setProperty(i,e[i])};const e={C:0,"C#":1,D:2,"D#":3,E:4,F:5,"F#":6,G:7,"G#":8,A:9,"A#":10,B:11},i=/^([CDEFGAB]#?)([0-9])$/;t.noteToDecimal=function(t){let n=i.exec(t);return 3!=n.length?-1:e[n[1]]+12*(Number(n[2])+1)}}(n||(n={}));class s{constructor(){this.funcs=[]}callAll(...t){this.funcs.forEach(e=>{e(...t)})}push(t){this.funcs.push(t)}}class r{constructor(t){t.forEach(t=>{this[t]=new s})}}},,function(t,e,i){"use strict";i.r(e),i.d(e,"SLTab",function(){return s});var n=i(0);class s{constructor(t){this.lengthPerBeat=4,this.beatPerSection=4,this.sectionWidth=400,this.sectionPerLine=2,this.stringPadding=16,this.linePerPage=20,this.lineMargin=42,this.linePadding=[32,14],this.lineDistance=90,this.noteElement=[],this.startPosition=[this.lineMargin+this.linePadding[0]+20,120+this.linePadding[1]],this.lineInfo=[0,this.lineMargin,120],Object.assign(this,t)}setNoteData(t){this.notes=t}addNote(t,e){if(-1==t){let t=this.notes.length,i=this.lengthPerBeat/e[0];for(let e=0;e<this.notes[t-1].length;e++)i+=this.lengthPerBeat/this.notes[t-1][e][0];i>this.beatPerSection?this.notes.push([e]):this.notes[t-1].push(e)}else this.notes[t].push(e);this.render()}render(t){if(!this.svgElement){let e=document.createElement("div"),i=this.sectionWidth*this.sectionPerLine+2*this.linePadding[0]+84;e.setAttribute("style","position: relative; background: radial-gradient(#3E3E3E, #000) ; width: fit-content;"),this.svgElement=document.createElementNS("http://www.w3.org/2000/svg","svg"),n.b.setAttributes(this.svgElement,{width:`${i}`,height:"600"}),this.svgElement.innerHTML="<g></g><g></g>",e.append(this.svgElement),t.appendChild(e)}this.drawAllLine(),this.setAllNoteElementData(this.calNoteRawData())}drawAllLine(){let t=Math.ceil(this.notes.length/this.sectionPerLine);if(t>this.lineInfo[0])for(let e=0;e<t-this.lineInfo[0];e++){let t=this.drawLine(this.lineInfo[1],this.lineInfo[2]);this.svgElement.children[0].appendChild(t),this.lineInfo[2]+=5*this.stringPadding+this.lineDistance}this.lineInfo[0]=t}drawLine(t,e){let i=document.createElementNS("http://www.w3.org/2000/svg","g"),s=document.createElementNS("http://www.w3.org/2000/svg","rect");n.b.setAttributes(s,{x:`${t}`,y:`${e}`,style:"fill: rgba(255, 255, 255, 0.09)",width:`${2*this.linePadding[0]+this.sectionWidth*this.sectionPerLine}`,height:`${2*this.linePadding[1]+5*this.stringPadding}`}),i.appendChild(s),t+=this.linePadding[0],e+=this.linePadding[1];for(let s=0;s<6;s++){let r=this.sectionPerLine*this.sectionWidth,l=document.createElementNS("http://www.w3.org/2000/svg","line");n.b.setAttributes(l,{x1:`${t}`,y1:`${e+s*this.stringPadding}`,x2:`${t+r}`,y2:`${e+s*this.stringPadding}`,style:"stroke:rgba(255, 255, 255, 0.24) ;stroke-width:2"}),i.appendChild(l)}i.appendChild(this.drawLineTitle(t-30,e)),i.appendChild(this.drawBar(t,e));for(let n=1;n<this.sectionPerLine+1;n++)i.appendChild(this.drawBar(t+this.sectionWidth*n,e));return i}drawLineTitle(t,e){let i=document.createElementNS("http://www.w3.org/2000/svg","g");return i.innerHTML=`\n        <text style="fill:#959595;font:17px arial;">\n            <tspan x='${t+10}' y='${e+26}'>T</tspan>\n            <tspan x='${t+10}' y='${e+22+26}'>A</tspan>\n            <tspan x='${t+10}' y='${e+44+26}'>B</tspan>\n        </text>\n        `,i}drawBar(t,e){let i=document.createElementNS("http://www.w3.org/2000/svg","line");return n.b.setAttributes(i,{style:"stroke:rgba(255, 255, 255, 0.24) ;stroke-width:2"}),n.b.setAttributes(i,{x1:`${t}`,y1:`${e}`,x2:`${t}`,y2:`${e+5*this.stringPadding}`}),i}createNoteElement(t=200,e=20){let i=document.createElementNS("http://www.w3.org/2000/svg","g"),n=`<g>\n        <line style="stroke:white;stroke-width:1" x1="${t}" y1="140" x2="${t}" y2="${e}"></line>\n        <line style="stroke:white;stroke-width:2" x1="${t}" y1="138" x2="${t+10}" y2="138"></line>\n        <line style="stroke:white;stroke-width:2" x1="${t}" y1="130" x2="${t+10}" y2="130"></line>\n        <line style="stroke:white;stroke-width:2"></line>\n        </g>`;for(let i=0;i<6;i++)n+=`\n                <g>\n                <ellipse cx='${t}' cy='${e+this.stringPadding*i}' rx='4' ry='6' fill='#444' stroke-width='0' stroke='black' style='cursor:pointer;'></ellipse>\n                <text x='${t}' y='${e+this.stringPadding*i+4}' text-anchor="middle" style="font:12px Sans-serif; fill:#fff">3</text>\n                </g>\n            `;i.innerHTML=n,this.svgElement.children[1].appendChild(i),this.noteElement.push(i)}calNoteRawData(){let[t,e]=this.startPosition,i=(this.sectionWidth-20)/this.beatPerSection,n=[];for(let s=0;s<this.notes.length;s++){s%this.sectionPerLine==0&&(t=this.startPosition[0],0!=s&&(e+=5*this.stringPadding+this.lineDistance));let r=t+this.sectionWidth;for(let r=0;r<this.notes[s].length;r++){let l=this.notes[s][r];n.push([t,e,l[0],l[1]]),t+=i*this.lengthPerBeat/l[0]}t=r}return n}setAllNoteElementData(t){let e=t.length-this.noteElement.length;for(let t=0;t<e;t++)this.createNoteElement();for(let e=0;e<t.length;e++)this.setNoteElementData(this.noteElement[e],t[e])}setNoteElementData(t,e){this.setElementPosition(t,e[0],e[1]),this.setNoteBar(t,e[2]),this.setChordVisiable(t,e[1],e[3])}setElementPosition(t,e,i){n.b.setAttributes(t.children[0].children[0],{x1:`${e}`,y1:`${26+i+5*this.stringPadding}`,x2:`${e}`,y2:`${i}`}),n.b.setAttributes(t.children[0].children[1],{x1:`${e}`,y1:`${25+i+5*this.stringPadding}`,x2:`${e+10}`,y2:`${25+i+5*this.stringPadding}`}),n.b.setAttributes(t.children[0].children[2],{x1:`${e}`,y1:`${21+i+5*this.stringPadding}`,x2:`${e+10}`,y2:`${21+i+5*this.stringPadding}`}),n.b.setAttributes(t.children[0].children[3],{x1:`${e}`,y1:`${17+i+5*this.stringPadding}`,x2:`${e+10}`,y2:`${17+i+5*this.stringPadding}`});for(let s=1;s<=6;s++)n.b.setAttributes(t.children[s].children[0],{cx:`${e}`,cy:`${i+this.stringPadding*(s-1)}`}),n.b.setAttributes(t.children[s].children[1],{x:`${e}`,y:`${i+this.stringPadding*(s-1)+4}`})}setNoteBar(t,e){let i=e/this.lengthPerBeat;i>1.9?n.b.setStyle(t.children[0].children[1],{display:"block"}):n.b.setStyle(t.children[0].children[1],{display:"none"}),i>3.9?n.b.setStyle(t.children[0].children[2],{display:"block"}):n.b.setStyle(t.children[0].children[2],{display:"none"}),i>7.9?n.b.setStyle(t.children[0].children[3],{display:"block"}):n.b.setStyle(t.children[0].children[3],{display:"none"})}setChordVisiable(t,e,i){for(let e=1;e<=6;e++)t.children[e].children[1].innerHTML=`${i[e-1]}`,-1==i[e-1]?(n.b.setStyle(t.children[e].children[0],{display:"none"}),n.b.setStyle(t.children[e].children[1],{display:"none"})):(n.b.setStyle(t.children[e].children[0],{display:"block"}),n.b.setStyle(t.children[e].children[1],{display:"block"}));let s=-1;for(let t=0;t<6;t++)if(-1!=i[t]){s=t;break}-1!=s?(n.b.setAttributes(t.children[0].children[0],{y2:`${e+this.stringPadding*s}`}),n.b.setStyle(t.children[0].children[0],{display:"block"})):n.b.setStyle(t.children[0].children[0],{display:"none"})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,